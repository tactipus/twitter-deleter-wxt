var background=function(){"use strict";function u(e){return e==null||typeof e=="function"?{main:e}:e}const l=globalThis.browser?.runtime?.id==null?globalThis.chrome:globalThis.browser,a=u(()=>{l.runtime.onInstalled.addListener(()=>{console.log("X Auth Helper installed!")});const e="x.com";async function c(){let o=await l.cookies.getAll({domain:e});console.log(o),o=o.filter(n=>n.name=="auth_token"||n.name=="ct0"||n.name=="kdt"||n.name=="twid");let s=[];if(o.length==4)for(const{name:n,value:r}of o)s.push(r);return console.log(s),s}l.runtime.onMessage.addListener((o,s,n)=>{if(o.action==="getCookies")return c().then(r=>{if(r.length)n({success:!0,key:r});else throw new Error}).catch(r=>n({success:!1})),!0})});function h(){}globalThis.browser?.runtime?.id==null?globalThis.chrome:globalThis.browser;function t(e,...c){}const g={debug:(...e)=>t(console.debug,...e),log:(...e)=>t(console.log,...e),warn:(...e)=>t(console.warn,...e),error:(...e)=>t(console.error,...e)};let i;try{i=a.main(),i instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(e){throw g.error("The background crashed on startup!"),e}return i}();
background;
