"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TweetMedia = exports.TweetEntities = exports.Tweet = void 0;
var rettiwt_core_1 = require("rettiwt-core");
var Logging_1 = require("../../enums/Logging");
var JsonUtils_1 = require("../../helper/JsonUtils");
var LogService_1 = require("../../services/internal/LogService");
var User_1 = require("./User");
/**
 * The details of a single tweet.
 *
 * @public
 */
var Tweet = /** @class */ (function () {
    /**
     * @param tweet - The raw tweet details.
     */
    function Tweet(tweet) {
        var _a, _b;
        this.id = tweet.rest_id;
        this.createdAt = tweet.legacy.created_at;
        this.tweetBy = new User_1.User(tweet.core.user_results.result);
        this.entities = new TweetEntities(tweet.legacy.entities);
        this.media = (_b = (_a = tweet.legacy.extended_entities) === null || _a === void 0 ? void 0 : _a.media) === null || _b === void 0 ? void 0 : _b.map(function (media) { return new TweetMedia(media); });
        this.quoted = this.getQuotedTweet(tweet);
        this.fullText = tweet.note_tweet ? tweet.note_tweet.note_tweet_results.result.text : tweet.legacy.full_text;
        this.replyTo = tweet.legacy.in_reply_to_status_id_str;
        this.lang = tweet.legacy.lang;
        this.quoteCount = tweet.legacy.quote_count;
        this.replyCount = tweet.legacy.reply_count;
        this.retweetCount = tweet.legacy.retweet_count;
        this.likeCount = tweet.legacy.favorite_count;
        this.viewCount = tweet.views.count ? parseInt(tweet.views.count) : 0;
        this.bookmarkCount = tweet.legacy.bookmark_count;
        this.retweetedTweet = this.getRetweetedTweet(tweet);
    }
    /**
     * Extract and deserialize the original quoted tweet from the given raw tweet.
     *
     * @param tweet - The raw tweet.
     *
     * @returns - The deserialized original quoted tweet.
     */
    Tweet.prototype.getQuotedTweet = function (tweet) {
        var _a, _b, _c, _d, _e, _f;
        // If tweet with limited visibility
        if (tweet.quoted_status_result &&
            ((_b = (_a = tweet.quoted_status_result) === null || _a === void 0 ? void 0 : _a.result) === null || _b === void 0 ? void 0 : _b.__typename) == 'TweetWithVisibilityResults' &&
            ((_d = (_c = tweet.quoted_status_result.result) === null || _c === void 0 ? void 0 : _c.tweet) === null || _d === void 0 ? void 0 : _d.legacy)) {
            return new Tweet(tweet.quoted_status_result.result.tweet);
        }
        // If normal tweet
        else if ((_f = (_e = tweet.quoted_status_result) === null || _e === void 0 ? void 0 : _e.result) === null || _f === void 0 ? void 0 : _f.rest_id) {
            return new Tweet(tweet.quoted_status_result.result);
        }
        // Else, skip
        else {
            return undefined;
        }
    };
    /**
     * Extract and deserialize the original retweeted tweet from the given raw tweet.
     *
     * @param tweet - The raw tweet.
     *
     * @returns - The deserialized original retweeted tweet.
     */
    Tweet.prototype.getRetweetedTweet = function (tweet) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        // If retweet with limited visibility
        if (((_a = tweet.legacy) === null || _a === void 0 ? void 0 : _a.retweeted_status_result) &&
            ((_d = (_c = (_b = tweet.legacy) === null || _b === void 0 ? void 0 : _b.retweeted_status_result) === null || _c === void 0 ? void 0 : _c.result) === null || _d === void 0 ? void 0 : _d.__typename) == 'TweetWithVisibilityResults' &&
            ((_h = (_g = (_f = (_e = tweet.legacy) === null || _e === void 0 ? void 0 : _e.retweeted_status_result) === null || _f === void 0 ? void 0 : _f.result) === null || _g === void 0 ? void 0 : _g.tweet) === null || _h === void 0 ? void 0 : _h.legacy)) {
            return new Tweet(tweet.legacy.retweeted_status_result.result.tweet);
        }
        // If normal tweet
        else if ((_l = (_k = (_j = tweet.legacy) === null || _j === void 0 ? void 0 : _j.retweeted_status_result) === null || _k === void 0 ? void 0 : _k.result) === null || _l === void 0 ? void 0 : _l.rest_id) {
            return new Tweet(tweet.legacy.retweeted_status_result.result);
        }
        // Else, skip
        else {
            return undefined;
        }
    };
    /**
     * Extracts and deserializes the list of tweets from the given raw response data.
     *
     * @param response - The raw response data.
     *
     * @returns The deserialized list of tweets.
     *
     * @internal
     */
    Tweet.list = function (response) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var tweets = [];
        // Extracting the matching data
        var extract = (0, JsonUtils_1.findByFilter)(response, '__typename', 'TimelineTweet');
        // Deserializing valid data
        for (var _i = 0, extract_1 = extract; _i < extract_1.length; _i++) {
            var item = extract_1[_i];
            // If tweet with limited visibility
            if (((_a = item.tweet_results) === null || _a === void 0 ? void 0 : _a.result) &&
                ((_c = (_b = item.tweet_results) === null || _b === void 0 ? void 0 : _b.result) === null || _c === void 0 ? void 0 : _c.__typename) == 'TweetWithVisibilityResults' &&
                ((_f = (_e = (_d = item.tweet_results) === null || _d === void 0 ? void 0 : _d.result) === null || _e === void 0 ? void 0 : _e.tweet) === null || _f === void 0 ? void 0 : _f.legacy)) {
                tweets.push(new Tweet(item.tweet_results.result.tweet));
            }
            // If normal tweet
            else if ((_h = (_g = item.tweet_results) === null || _g === void 0 ? void 0 : _g.result) === null || _h === void 0 ? void 0 : _h.legacy) {
                // Logging
                LogService_1.LogService.log(Logging_1.ELogActions.DESERIALIZE, { id: item.tweet_results.result.rest_id });
                tweets.push(new Tweet(item.tweet_results.result));
            }
            // If invalid/unrecognized tweet
            else {
                // Logging
                LogService_1.LogService.log(Logging_1.ELogActions.WARNING, {
                    action: Logging_1.ELogActions.DESERIALIZE,
                    message: "Tweet not found, skipping",
                });
            }
        }
        return tweets;
    };
    /**
     * Extracts and deserializes a single target tweet from the given raw response data.
     *
     * @param response - The raw response data.
     * @param id - The id of the target tweet.
     *
     * @returns The target deserialized tweet.
     *
     * @internal
     */
    Tweet.single = function (response, id) {
        var tweets = [];
        // Extracting the matching data
        var extract = (0, JsonUtils_1.findByFilter)(response, 'rest_id', id);
        // Deserializing valid data
        for (var _i = 0, extract_2 = extract; _i < extract_2.length; _i++) {
            var item = extract_2[_i];
            if (item.legacy) {
                // Logging
                LogService_1.LogService.log(Logging_1.ELogActions.DESERIALIZE, { id: item.rest_id });
                tweets.push(new Tweet(item));
            }
            else {
                // Logging
                LogService_1.LogService.log(Logging_1.ELogActions.WARNING, {
                    action: Logging_1.ELogActions.DESERIALIZE,
                    message: "Tweet not found, skipping",
                });
            }
        }
        return tweets.length ? tweets[0] : undefined;
    };
    return Tweet;
}());
exports.Tweet = Tweet;
/**
 * The different types parsed entities like urls, media, mentions, hashtags, etc.
 *
 * @public
 */
var TweetEntities = /** @class */ (function () {
    /**
     * @param entities - The raw tweet entities.
     */
    function TweetEntities(entities) {
        /** The list of hashtags mentioned in the tweet. */
        this.hashtags = [];
        /** The list of IDs of users mentioned in the tweet. */
        this.mentionedUsers = [];
        /** The list of urls mentioned in the tweet. */
        this.urls = [];
        // Extracting user mentions
        if (entities.user_mentions) {
            for (var _i = 0, _a = entities.user_mentions; _i < _a.length; _i++) {
                var user = _a[_i];
                this.mentionedUsers.push(user.screen_name);
            }
        }
        // Extracting urls
        if (entities.urls) {
            for (var _b = 0, _c = entities.urls; _b < _c.length; _b++) {
                var url = _c[_b];
                this.urls.push(url.expanded_url);
            }
        }
        // Extracting hashtags
        if (entities.hashtags) {
            for (var _d = 0, _e = entities.hashtags; _d < _e.length; _d++) {
                var hashtag = _e[_d];
                this.hashtags.push(hashtag.text);
            }
        }
    }
    return TweetEntities;
}());
exports.TweetEntities = TweetEntities;
/**
 * The details of a single media content included in a tweet.
 *
 * @public
 */
var TweetMedia = /** @class */ (function () {
    /**
     * @param media - The raw media details.
     */
    function TweetMedia(media) {
        var _this = this;
        var _a, _b;
        /** The direct URL to the media. */
        this.url = '';
        this.type = media.type;
        // If the media is a photo
        if (media.type == rettiwt_core_1.EMediaType.PHOTO) {
            this.url = media.media_url_https;
        }
        // If the media is a gif
        else if (media.type == rettiwt_core_1.EMediaType.GIF) {
            this.url = (_a = media.video_info) === null || _a === void 0 ? void 0 : _a.variants[0].url;
        }
        // If the media is a video
        else {
            this.thumbnailUrl = media.media_url_https;
            /** The highest bitrate of all variants. */
            var highestRate_1 = 0;
            /**
             * Selecting the URL of the video variant with the highest bitrate.
             */
            (_b = media.video_info) === null || _b === void 0 ? void 0 : _b.variants.forEach(function (variant) {
                if (variant.bitrate > highestRate_1) {
                    highestRate_1 = variant.bitrate;
                    _this.url = variant.url;
                }
            });
        }
    }
    return TweetMedia;
}());
exports.TweetMedia = TweetMedia;
//# sourceMappingURL=Tweet.js.map